\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename cl-icalendar.info
@settitle cl-icalendar
@c %**end of header

@include version.texi

@ignore
@c ---------------
@deffn {Generic function} name arg1 arg2 ... @result{} result
@table @strong

@c Parameters and values
@item Arguments and values
@table @var
@item arg1
...
@item arg2
...
@item result
...
@end table

@c Description
@item Description
...

@c Exceptional situations
@item Exceptional situations
...

@c Examples
@item Examples
@lisp
...
@end lisp

@c Affected by
@item Affected by
@c ...

@c Side effects
@item Side effects
@c ...

@c See also
@item See also
@c ...

@c Notes
@item Notes
@c ...
@end table
@end deffn
@end ignore


@c Copy the type, variable and function indexes to the cp one.
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp

@copying
This is the @cite{Common Lisp iCalendar Library Reference} updated for
the version @cite{@value{VERSION}}.

Copyright @copyright{} 2010  Mario Castel@'an Castro

Copyright @copyright{} 2010  David V@'azquez P@'ua

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU
Free Documentation License''.

A copy of the license is also available from the Free Software
Foundation Web site at @url{http://www.gnu.org/licenses/fdl.html}.
@end quotation

The document was typeset with
@uref{http://www.texinfo.org/, GNU Texinfo}.

@end copying


@titlepage
@title Common Lisp iCalendar Library
@subtitle An implementation of the iCalendar specification
@subtitle for cl-icalendar version @value{VERSION}.
@author Mario Castel@'an Castro
@author David V@'azquez P@'ua
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@ifnottex
@node Top
@top Common Lisp iCalendar Library Reference

@insertcopying
@end ifnottex

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
* Introduction::                
* Overview::                    
* Data types::                  
* Components::                  
* High level abstractions::     
* Conditions and error handling::  
* GNU Free Documentation License::  
* Index::                       
@end menu

@c Update all node entries with `C-c C-u C-n'.
@c Insert new nodes with `C-c C-c n'.
@node Introduction
@chapter Introduction

@menu
* Instalation::                 
* Conventions::
@end menu

@node Instalation
@section Instalation

@node Conventions
@section Conventions

@node Overview
@chapter Overview

@node Data types
@chapter Data types

@menu
* Boolean::                     
* Integer::                     
* Float::                       
* Text::                        
* Binary::                      
* URI::                         
* Cal-address::                 
* UTC-Offset::                  
* Date::                        
* Time::                        
* Datetime::                    
* Duration::                    
* Period::                      
* Recur::                       
@end menu

@deftp {Data type} ical-value
@table @strong
@item Type Precedence List
ical-value, t
@item Description
The type of the objects which can be value of iCalendar values.
@end table
@end deftp


@deffn {Generic function} parse-value string type &rest parameters &key &allow-other-keys @result{} object
@table @strong

@c Parameters and values
@item Arguments and values
@table @var
@item string
A string.
@item type
A symbol.
@item parameters
A parameter list.
@item object
An object of type @var{type}.
@end table

@c Description
@item Description
@code{parse-value} parses an iCalendar value according to the syntax for
a object of type @var{type}.

@code{parse-value} ignores the unknown parameters. See the documentation
for each type in order to know how the parameters are treated.

@c Exceptional situations
@item Exceptional situations
If string is not a valid representation for a object according for the
syntax for objects of type @var{type}, then a @code{ical-parse-error}
condition is signaled.

@c Examples
@item Examples
@lisp
(parse-value "12" 'integer) @result{} 12
(parse-value "12.1" 'float) @result{} 12.1
(parse-value "DT3H" 'duration) @result{} <#DURATION 3 hours>
;; TODO: Write wrong examples.
@end lisp

@c See also
@item See also
@code{parse-values}.

@end table
@end deffn


@deffn {Generic function} parse-values string type &rest parameters &key &allow-other-keys @result{} objects
@table @strong

@c Parameters and values
@item Arguments and values
@table @var
@item string
A string.
@item type
A symbol.
@item parameters
A parameter list.
@item object
A list of objects of type @var{type}.
@end table

@c Description
@item Description
@code{parse-values} parses a comma-delimited list of iCalendar values
according to the syntax for a object of type @var{type}.

@code{parse-values} ignores the unknown parameters. See the documentation
for each type in order to know how the parameters are treated.

@c Exceptional situations
@item Exceptional situations
If the representation for some object is not valid according for the
syntax for objects of type @var{type}, then a @code{ical-parse-error}
condition is signaled.

@c Examples
@item Examples
@lisp
(parse-values "0,1,2" 'integer) @result{} (0 1 2)
(parse-values "foo,bar,1\\,2 and 3." 'text) @* @result{} ("foo" "bar" "1, 2 and 3.")
@end lisp

@c See also
@item See also
@code{parse-value}.

@end table
@end deffn


@c ---------------
@deffn {Generic function} format-value object &rest parameters &key &allow-other-keys @result{} @code{nil}
@table @strong

@c Parameters and values
@item Arguments and values
@table @var
@item object
A @code{ical-value} object.
@item parameters
A parameter list.
@end table

@c Description
@item Description
Return a string which is an external representation of
@var{object}. This representation could be affected by the list of
@var{parameters}. See the documentation of specific ypes for futher
information.

@c Exceptional situations
@item Exceptional situations
If object is not an @code{ical-value} object, a error is signaled.

@c Examples
@item Examples
@lisp
(format-value "lisp" :encoding :base64) @result{} "bGlzcA=="
;; TODO: Write more examples
@end lisp

@end table
@end deffn


@c ---------------
@deffn {Generic function} format-values objects &rest parameters &key &allow-other-keys @result{} @code{nil}
@table @strong

@c Parameters and values
@item Arguments and values
@table @var
@item object
A list of @code{ical-value} objects.
@item parameters
A parameter list.
@end table

@c Description
@item Description
@code{format-values} return a string which is an external representation
of multiple @var{objects}. This representation could be affected by the
list of @var{parameters}. See the documentation of specific ypes for
futher information.

@c Exceptional situations
@item Exceptional situations
If some object is not an @code{ical-value} object, a error is signaled.

@c Examples
@item Examples
@lisp
;; TODO: Write more examples
@end lisp

@c Notes
@item Notes
@code{format-values} does not signal error if all objects are
@code{ical-value} ones. However, if there are objects whose types are
different, the outcoming string is not a valid value for iCalendar
properties.
@end table
@end deffn


@node Boolean
@section Boolean

This value type is used to identify properties that contain either a
"TRUE" or "FALSE" Boolean value.

@deftp {ANSI Common Lisp type} boolean
@table @strong
@item Syntax
@verbatim
boolean = "TRUE" / "FALSE"
@end verbatim
@item Description
These values are case insensitive text.
@item Examples
@example
TrUE
TRUE
False
@end example
@end table
@end deftp

@node Integer
@section Integer

This value type is used to identify properties that contain a signed
integer value.

@deftp {ANSI Common Lisp type} integer
@table @strong
@item Syntax
@verbatim
integer = (["+"] / "-") 1*DIGIT
@end verbatim
@item Description
If the sign is not specified, then the value is assumed to be
positive.
@item Examples
@example
1234567890
-1234567890
+1234567890
432109876
@end example
@item Notes
@cite{cl-icalendar} do not define any limit for integer values, however,
the iCalendar specification sets the valid range is -2147483648 to
2147483647.
@end table
@end deftp


@node Float
@section Float

@node Text
@section Text

@node Binary
@section Binary

@node URI
@section URI

@node Cal-address
@section Cal-address

@node UTC-Offset
@section UTC-Offset

@node Date
@section Date

@node Time
@section Time

@node Datetime
@section Datetime

@node Duration
@section Duration

@node Period
@section Period

@node Recur
@section Recur

@node Components
@chapter Components

@node High level abstractions
@chapter High level abstractions

@node Conditions and error handling
@appendix Conditions and error handling@*

@deftp {Condition} ical-parse-error
@table @strong
@item Condition Precedence List
error, t
@end table
TODO: To be implemented.
@end deftp


@node GNU Free Documentation License
@appendix GNU Free Documentation License
@c Get fdl.texi from http://www.gnu.org/licenses/fdl.html
@include fdl.texi

@node Index
@unnumbered Index
@printindex cp

@bye

@c cl-icalendar.texi ends here
